Operation analytics and investigating metrics spike
❖ Project Description: 
➢ The given project consists of 2 case studies:-
•	First is regarding Operation Analytics where job data is provided and the number of jobs reviewed, a 7-day rolling average of throughput, percentage share of language used, and duplicates are found.
•	Second is Investigating Metric Spikes where user engagement, user growth,  weekly retention, and email engagement are determined.
•	The following information is found with the help of SQL queries.

❖ Approach:- 
The required information was determined via SQL queries where the database was created first in SQL and moreover for the second case study due to the size of the data excel was used to make charts for better visualization.
operation analytics:- 
1.Number of jobs reviewed:- 
select avg(t) as 'avg jobs reviewed per day per hour’,avg(p) as 'avg jobs reviewed per day per second’From(select ds,((count(job_id)*3600)/sum(time_spent)) as t,((count(job_id))/sum(time_spent)) as p from job_data where month(ds)=11 group by ds) a; 
 

2.Throughput:- 
Select ds, c/t as throuput_per_day, c7/s7 as throuput_7_day_rolling From (select ds, count(job_id) as c,sum(time_spent) as t, count(job_id) over(order by ds rows between 6 preceding and current row) as c7,sum(time_spent) over(order by ds rows between 6 preceding and current row) as s7 from job_data where month(ds)=11 group by ds) a;
 
 3.Finding duplicates:- 
select * from(select *,row_number() over(partition by ds,actor_id,job_id) as row_num from job_data) a where row_num>1;
 

 4.Percentage share of language used in last 30 days:- 
select language , num_jobs, OperatiOn analytics and investigating metrics spike 100.0*num_jobs/total_jobs as pct_share_jobs From ( Select language,count(distinct job_id)as num_jobs From job_data Group by language)a Cross join (select count(distinct job_id) as total_jobs From job_data)b;  
	Investigating Metric Spike Approach:-
1.Weekly user engagement:- 
select *, engagement-lag(engagement) over(partition by'week of the year') as 'weekly engagement growth’ From (select week(occurred_at) as 'week of the year’, count(event_name) as 'engagement’ from events where event_type!='signup_flow’ group by week(occurred_at))a;
 
 2.User growth:-
 select *, new_user_activated-lag(new_user_activated) over( order by year_,quarter_ ) as user_growth from(select year(created_at) as year_,quarter(created_at) as quarter_,count(user_id) as new_user_activated from users where activated_at is not null and state='active’ group by 1,2)a ; 
 
3.Weekly retention cohort analysis:- 
Select week_period, first_value(cohort_retained) over (order by week_period) as cohort_size, cohort_retained, cohort_retained / first_value(cohort_retained) over (order by week_period) as pct_retained From (select timestampdiff(week,a.activated_at,b.occurred_at) as week_period, count(distinct a.user_id) as cohort_retained From (select user_id, activated_at from users where state='active'group by 1) a inner join (select user_id,occurred_at from events )b on a.user_id=b.user_id group by 1) c;
 

 4.Weekly engagement per device:- 
Select device_name, avg(num_users_using_device) as avg_weekly_users, avg(times_device_use_current_week) as avg_times_used_weekly From (select week(occurred_at) as week, device as device_name , count(distinct user_id) as num_users_using_device, count(device) as times_device_use_current_week from events where event_name='login’ group by 1,2 OperatiOn analytics and investigating metrics spike order by 1) a group by 1;  


 5.E-mail engagement metric:-
 Select week, num_users, time_weekly_digest_sent, time_weekly_digest_sent-lag(time_weekly_digest_sent) over(order by week) as time_weekly_digest_sent_growth, time_email_open,time_email_open-lag(time_email_open) over(order by week) as time_email_open_growth, time_email_clickthrough,time_email_clickthrough-lag(time_email_clickthrough) over(order by week) as time_email_clickthrough_growth From (select week(occurred_at)as week, count(distinct user_id) as num_users, sum(if(action='sent_weekly_digest',1,0)) as time_weekly_digest_sent, sum(if(action='email_open',1,0)) as time_email_open, sum(if(action='email_clickthrough',1,0)) as time_email_clickthrough from email group by 1 order by 1) a;  

	Insights:-
	Case Study 1 (job Data):-
 ▪ In November 2020, the number of different jobs reviewed per hour per day was 83%. 
▪ We use a 7-day moving average throughput as it provides an average for all days from day 1 to day 7, whereas the daily metric only provides an average for a particular day itself.
 ▪ Persian has the highest rate (37.5%). Operation analytics and investigating metrics spike 
▪ If we split the job_id, there are two duplicate rows. But if we look at all columns, each row is unique. 
	Case Study 2 (investigated Metrics spike ): 
▪ All data corresponding to Day 35 should be disregarded, as this is only the first day of the week.

	A total of 9381 active users from the first week of 2013 to the 35th week of 2014.

	Average retention rate after first week 72.5%

	MacBook users and Samsung galaxy tablet users contribute with more than one device per week.

	E-mail open rate is 1117, e-mail click-through rate is around 493. People use email services that are essential for the growth of the company.


	Tech stack used:-
•	MySQL was used to run the queries. 
•	The language was selected because of comfort and experience in the same.
•	MS Excel was used in the second case study for better visualization.
•	As I am currently learning this tool, it was utilized to get more hands-on experience.

	 Result:-
Really engaging project, the difficulty of the project makes it more fulfilling to execute. Learned a lot of new things like rolling over and get cohort retention analysis.
